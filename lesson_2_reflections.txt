What happens when you initialize a repository? Why do you need to do it?

	It creates a .git directory which tracks metadata for all the files located
	within the initial directory. It does not, however, create a commit until you
	tell it to do so. This is the step that makes it possible to engage a directory
	through git commands... I think?

How is the staging area different from the working directory and the repository? What value do you think it offers?

	The staging area allows the user greater control of a commit. You can select exactly
	what files are being committed and, in turn, align best practice of keeping commits
	small. The staging area is conducive to allowing one commit per logical change.

How can you use the staging area to make sure you have one commit per logical change?

	Running git diff --staged is one way to check the quantity of changes being
	commited and ensure that only one logical change is being committed at a time.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	Branches could help organize multiple versions of a project. As an example, there
	might be a branch for an easy-mode in a game that's separate from the standard version.

How do the diagrams help you visualize the branch structure?

	Diagrams show how branches stem off from each other and each commit is a progression
	on its "parent". It also helps in visualizing the last unified commit before two
	branches split off from each other.